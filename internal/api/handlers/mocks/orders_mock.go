// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/fragpit/gophermart/internal/api/handlers (interfaces: OrdersService)
//
// Generated by this command:
//
//	mockgen -destination ./mocks/orders_mock.go . OrdersService
//

// Package mock_handlers is a generated GoMock package.
package mock_handlers

import (
	context "context"
	reflect "reflect"

	model "github.com/fragpit/gophermart/internal/model"
	gomock "go.uber.org/mock/gomock"
)

// MockOrdersService is a mock of OrdersService interface.
type MockOrdersService struct {
	ctrl     *gomock.Controller
	recorder *MockOrdersServiceMockRecorder
	isgomock struct{}
}

// MockOrdersServiceMockRecorder is the mock recorder for MockOrdersService.
type MockOrdersServiceMockRecorder struct {
	mock *MockOrdersService
}

// NewMockOrdersService creates a new mock instance.
func NewMockOrdersService(ctrl *gomock.Controller) *MockOrdersService {
	mock := &MockOrdersService{ctrl: ctrl}
	mock.recorder = &MockOrdersServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrdersService) EXPECT() *MockOrdersServiceMockRecorder {
	return m.recorder
}

// AddOrder mocks base method.
func (m *MockOrdersService) AddOrder(ctx context.Context, userID int, orderNumber string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddOrder", ctx, userID, orderNumber)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddOrder indicates an expected call of AddOrder.
func (mr *MockOrdersServiceMockRecorder) AddOrder(ctx, userID, orderNumber any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOrder", reflect.TypeOf((*MockOrdersService)(nil).AddOrder), ctx, userID, orderNumber)
}

// GetOrdersByUser mocks base method.
func (m *MockOrdersService) GetOrdersByUser(ctx context.Context, userID int) ([]model.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrdersByUser", ctx, userID)
	ret0, _ := ret[0].([]model.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrdersByUser indicates an expected call of GetOrdersByUser.
func (mr *MockOrdersServiceMockRecorder) GetOrdersByUser(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrdersByUser", reflect.TypeOf((*MockOrdersService)(nil).GetOrdersByUser), ctx, userID)
}
