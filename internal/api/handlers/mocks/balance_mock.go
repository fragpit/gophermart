// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/fragpit/gophermart/internal/api/handlers (interfaces: BalanceService)
//
// Generated by this command:
//
//	mockgen -destination ./mocks/balance_mock.go . BalanceService
//

// Package mock_handlers is a generated GoMock package.
package mock_handlers

import (
	context "context"
	reflect "reflect"

	model "github.com/fragpit/gophermart/internal/model"
	gomock "go.uber.org/mock/gomock"
)

// MockBalanceService is a mock of BalanceService interface.
type MockBalanceService struct {
	ctrl     *gomock.Controller
	recorder *MockBalanceServiceMockRecorder
	isgomock struct{}
}

// MockBalanceServiceMockRecorder is the mock recorder for MockBalanceService.
type MockBalanceServiceMockRecorder struct {
	mock *MockBalanceService
}

// NewMockBalanceService creates a new mock instance.
func NewMockBalanceService(ctrl *gomock.Controller) *MockBalanceService {
	mock := &MockBalanceService{ctrl: ctrl}
	mock.recorder = &MockBalanceServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBalanceService) EXPECT() *MockBalanceServiceMockRecorder {
	return m.recorder
}

// GetUserBalance mocks base method.
func (m *MockBalanceService) GetUserBalance(ctx context.Context, userID int) (model.Kopek, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserBalance", ctx, userID)
	ret0, _ := ret[0].(model.Kopek)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserBalance indicates an expected call of GetUserBalance.
func (mr *MockBalanceServiceMockRecorder) GetUserBalance(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserBalance", reflect.TypeOf((*MockBalanceService)(nil).GetUserBalance), ctx, userID)
}

// GetWithdrawalsSum mocks base method.
func (m *MockBalanceService) GetWithdrawalsSum(ctx context.Context, userID int) (model.Kopek, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWithdrawalsSum", ctx, userID)
	ret0, _ := ret[0].(model.Kopek)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWithdrawalsSum indicates an expected call of GetWithdrawalsSum.
func (mr *MockBalanceServiceMockRecorder) GetWithdrawalsSum(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithdrawalsSum", reflect.TypeOf((*MockBalanceService)(nil).GetWithdrawalsSum), ctx, userID)
}

// WithdrawPoints mocks base method.
func (m *MockBalanceService) WithdrawPoints(ctx context.Context, userID int, orderNum string, sum model.Kopek) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithdrawPoints", ctx, userID, orderNum, sum)
	ret0, _ := ret[0].(error)
	return ret0
}

// WithdrawPoints indicates an expected call of WithdrawPoints.
func (mr *MockBalanceServiceMockRecorder) WithdrawPoints(ctx, userID, orderNum, sum any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithdrawPoints", reflect.TypeOf((*MockBalanceService)(nil).WithdrawPoints), ctx, userID, orderNum, sum)
}
