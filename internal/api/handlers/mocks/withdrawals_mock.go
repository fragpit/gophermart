// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/fragpit/gophermart/internal/api/handlers (interfaces: WithdrawalsService)
//
// Generated by this command:
//
//	mockgen -destination ./mocks/withdrawals_mock.go . WithdrawalsService
//

// Package mock_handlers is a generated GoMock package.
package mock_handlers

import (
	context "context"
	reflect "reflect"

	model "github.com/fragpit/gophermart/internal/model"
	gomock "go.uber.org/mock/gomock"
)

// MockWithdrawalsService is a mock of WithdrawalsService interface.
type MockWithdrawalsService struct {
	ctrl     *gomock.Controller
	recorder *MockWithdrawalsServiceMockRecorder
	isgomock struct{}
}

// MockWithdrawalsServiceMockRecorder is the mock recorder for MockWithdrawalsService.
type MockWithdrawalsServiceMockRecorder struct {
	mock *MockWithdrawalsService
}

// NewMockWithdrawalsService creates a new mock instance.
func NewMockWithdrawalsService(ctrl *gomock.Controller) *MockWithdrawalsService {
	mock := &MockWithdrawalsService{ctrl: ctrl}
	mock.recorder = &MockWithdrawalsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWithdrawalsService) EXPECT() *MockWithdrawalsServiceMockRecorder {
	return m.recorder
}

// GetWithdrawalsByUser mocks base method.
func (m *MockWithdrawalsService) GetWithdrawalsByUser(ctx context.Context, userID int) ([]model.Withdrawal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWithdrawalsByUser", ctx, userID)
	ret0, _ := ret[0].([]model.Withdrawal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWithdrawalsByUser indicates an expected call of GetWithdrawalsByUser.
func (mr *MockWithdrawalsServiceMockRecorder) GetWithdrawalsByUser(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithdrawalsByUser", reflect.TypeOf((*MockWithdrawalsService)(nil).GetWithdrawalsByUser), ctx, userID)
}
